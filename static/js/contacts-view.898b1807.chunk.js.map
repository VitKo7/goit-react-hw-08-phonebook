{"version":3,"sources":["components/contact-form/ContactForm.module.css","components/contact-list-item/ContactListItem.module.css","components/contact-list/transitions/pop.module.css","components/contact-list/ContactList.module.css","components/filter/Filter.module.css","views/ContactsView.module.css","redux/contacts/contacts-selectors.js","components/contact-form/ContactForm.jsx","redux/contacts/contacts-operations.js","components/contact-list-item/ContactListItem.jsx","components/contact-list/ContactList.jsx","components/contact-list/ContactList.container.js","components/filter/Filter.jsx","views/ContactsView.jsx"],"names":["module","exports","getAllContacts","state","contacts","items","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","item","name","toLowerCase","includes","ContactForm","number","handleInput","event","target","value","setState","handleSubmit","preventDefault","entryCheck","props","find","contact","alert","length","contactNew","id","nanoid","addContact","resetForm","this","onSubmit","className","styles","addContactForm","label","type","placeholder","input","onChange","btnAdd","Component","mapDispatchToProps","dispatch","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","connect","contactsSelectors","deleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","data-id","onClick","btnDelete","ContactList","fetchContacts","TransitionGroup","component","list","map","CSSTransition","timeout","classNames","popTransition","contactListItem","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","Filter","autoComplete","ContactsView","container","isLoadingContacts","color","height","width","contactsTitle"],"mappings":"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","file":"static/js/contacts-view.898b1807.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addContactForm\":\"ContactForm_addContactForm__1Rcxw\",\"label\":\"ContactForm_label__1ENTd\",\"input\":\"ContactForm_input__1ymnl\",\"text\":\"ContactForm_text__3D7dF\",\"btnAdd\":\"ContactForm_btnAdd__1e0RF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactListItem_btnDelete__3I0s0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1cTEn\",\"enterActive\":\"pop_enterActive__2_kxm\",\"exit\":\"pop_exit__HtqQ6\",\"exitActive\":\"pop_exitActive__1kkza\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3hH2C\",\"contactListItem\":\"ContactList_contactListItem__OdCci\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2sa19\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsView_container__1jNmV\",\"contacts\":\"ContactsView_contacts__3PUUr\",\"contactsTitle\":\"ContactsView_contactsTitle__3qx8F\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\n// const getFilteredContacts = state => {\r\n//   const items = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (items, filter) => {\r\n    return items.filter(item =>\r\n      item.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\n\r\n\r\nexport default {\r\n  getLoading,\r\n  getAllContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport styles from './ContactForm.module.css';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInput = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    const entryCheck = this.props.contacts.find(\r\n      contact => contact.name === name || contact.number === number,\r\n    );\r\n\r\n    if (entryCheck) {\r\n      alert(\r\n        `Either '${entryCheck.name}' or '${entryCheck.number}' already exists`,\r\n      );\r\n    } else if (name.length === 0 || number.length === 0) {\r\n      alert(`Please, fill in all the fields`);\r\n    } else {\r\n      const contactNew = {\r\n        id: nanoid(),\r\n        name,\r\n        number,\r\n      };\r\n      this.props.addContact(contactNew);\r\n    }\r\n    this.resetForm();\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className={styles.addContactForm}>\r\n          <label className={styles.label}>Name:</label>\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Name Surname\"\r\n            className={styles.input}\r\n            onChange={this.handleInput}\r\n            value={name}\r\n          />\r\n          <label className={styles.label}>Number:</label>\r\n          <input\r\n            name=\"number\"\r\n            type=\"text\"\r\n            // type=\"tel\"\r\n            placeholder=\"123-456\"\r\n            // pattern=\"[0-9]{3}-[0-9]{3}\"\r\n            className={styles.input}\r\n            onChange={this.handleInput}\r\n            value={number}\r\n          />\r\n          {/* <span className={styles.text}>\r\n            <i>Use this format only:</i> xxx-xxx\r\n          </span> */}\r\n          <button type=\"submit\" className={styles.btnAdd}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\n// const addContact = contact => dispatch => {\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post('/contacts', contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch(error => dispatch(addContactError(error)));\r\n// };\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n\r\n// const deleteContact = contactId => dispatch => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(data => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch(error => dispatch(deleteContactError(error)));\r\n// };\r\n\r\nexport { addContact, deleteContact, fetchContacts };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, deleteContact }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.contact}>\r\n        <b>{name}</b>: {number}\r\n      </p>\r\n\r\n      <button\r\n        data-id={id}\r\n        onClick={event => deleteContact(id)}\r\n        type=\"button\"\r\n        className={styles.btnDelete}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  deleteContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport ContactListItem from '../contact-list-item/ContactListItem';\r\n// import { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport popTransition from './transitions/pop.module.css';\r\n// import slideTransition from './transitions/slide.module.css';\r\nimport styles from './ContactList.module.css';\r\n\r\nclass ContactList extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contactsList\">\r\n        {this.props.contacts.length === 0 ? (\r\n          <p>There are no contacts here yet ...</p>\r\n        ) : (\r\n          <TransitionGroup component=\"ul\" className={styles.list}>\r\n            {/* <ul className={styles.list}> */}\r\n            {this.props.contacts.map(contact => (\r\n              <CSSTransition\r\n                key={contact.id}\r\n                timeout={200}\r\n                classNames={popTransition}\r\n              >\r\n                <li className={styles.contactListItem} key={contact.id}>\r\n                  <ContactListItem {...contact} />\r\n                </li>\r\n              </CSSTransition>\r\n            ))}\r\n            {/* </ul> */}\r\n          </TransitionGroup>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const ContactList = ({ contacts }) => {\r\n// componentDidMount() {\r\n//   this.props.fetchContacts();\r\n// }\r\n// return (\r\n//   <div className=\"contactsList\">\r\n//     {contacts.length === 0 ? (\r\n//       <p>There are no contacts here yet ...</p>\r\n//     ) : (\r\n//       <TransitionGroup component=\"ul\" className={styles.list}>\r\n//         {/* <ul className={styles.list}> */}\r\n//         {contacts.map(contact => (\r\n//           <CSSTransition\r\n//             key={contact.id}\r\n//             timeout={200}\r\n//             classNames={popTransition}\r\n//           >\r\n//             <li className={styles.contactListItem} key={contact.id}>\r\n//               <ContactListItem {...contact} />\r\n//             </li>\r\n//           </CSSTransition>\r\n//         ))}\r\n//         {/* </ul> */}\r\n//       </TransitionGroup>\r\n//     )}\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array.isRequired,\r\n//   // onRemove: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const getFilteredContacts = state => {\r\n//   const { filter, items } = state.contacts;\r\n//   // const { contacts } = this.state;\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: getFilteredContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {};\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\r\nimport ContactList from './ContactList';\r\nimport { handleInput } from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\n// const getFilteredContacts = state => {\r\n//   const { filter, items } = state.contacts;\r\n\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts:\r\n    state.contacts.items.length > 2\r\n      ? contactsSelectors.getFilteredContacts(state)\r\n      : state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchContacts,\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleInput } from '../../redux/contacts/contacts-actions';\r\nimport styles from './Filter.module.css';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nclass Filter extends Component {\r\n  state = {};\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.contacts.length <= 2) {\r\n      this.props.handleInput('');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { contacts, filter, handleInput } = this.props;\r\n\r\n    return (\r\n      <>\r\n        {contacts.length > 2 && (\r\n          <div className=\"contactsFilter\">\r\n            <p>Find contacts by name:</p>\r\n            <input\r\n              name=\"filter\"\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              className={styles.input}\r\n              onChange={event => handleInput(event.target.value)}\r\n              value={filter}\r\n            />\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  handleInput: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilter(state),\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../components/contact-form/ContactForm';\r\nimport ContactList from '../components/contact-list/ContactList.container';\r\nimport Filter from '../components/filter/Filter';\r\nimport { handleInput } from '../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './ContactsView.module.css';\r\n\r\nclass ContactsView extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <h2>Phonebook</h2>\r\n        <ContactForm />\r\n\r\n        {this.props.isLoadingContacts && (\r\n          <Loader type=\"ThreeDots\" color=\"green\" height={80} width={80} />\r\n        )}\r\n\r\n        <div className={styles.contacts}>\r\n          <h3 className={styles.contactsTitle}>Contacts</h3>\r\n          <Filter />\r\n          <ContactList handleInput={this.props.handleInput} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}